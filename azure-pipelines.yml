trigger:
  branches:
      include:
        - staging
        - master

variables:

  # Solution Variables
  buildPlatform: 'x64'
  buildProjects: '**/Master.Database.Management*.csproj'
  publishDataLayer: '**\Master.Database.Management.DataLayer.csproj'
  publishServerlessApi: '**\Master.Database.Management.ServerlessApi.csproj'
  buildConfiguration: 'Release'

  # Version Handling Variables
  majorProductVersion: 1   
  minorProductVersion: 0
  
  # Artifact Drop Folder
  artifactName: 'drop'

jobs:
# master branch versioning
- job: Build_Master_Version_Number
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  variables:
    masterMajorMinor: $(majorProductVersion).$(minorProductVersion)
    masterPatchCount: $[counter(variables['masterMajorMinor'], 0)]
  steps:
    - bash: |
        echo "##vso[build.updatebuildnumber]$(majorProductVersion).$(minorProductVersion).$(masterPatchCount)"
      name: IfMasterSetBuildNameAndPatch

# staging branch versioning
- job: Build_Staging_Version_Number
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/staging')
  variables:
    stagingMajorMinor: $(majorProductVersion).$(minorProductVersion)-beta
    stagingPatchCount: $[counter(variables['stagingMajorMinor'], 0)]
  steps:
    - bash: |
        echo "##vso[build.updatebuildnumber]$(majorProductVersion).$(minorProductVersion).$(stagingPatchCount)-beta"
      name: IfStagingSetBuildNameAndPatch

# PR versioning for master branch & staging branch
- job: Build_PullRequest_Version_Number
  condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.SourceBranch'], 'refs/heads/staging'), eq(variables['Build.Reason'], 'PullRequest'))
  variables:
    pullRequestMajorMinor: $(majorProductVersion).$(minorProductVersion)-alpha$(variables['system.pullrequest.pullrequestid'])
    pullRequestPatchCount: $[counter(variables['pullRequestMajorMinor'], 0)]
  steps:
    - bash: |
        echo "##vso[build.updatebuildnumber]$(majorProductVersion).$(minorProductVersion).0-alpha$(system.pullrequest.pullrequestid)-$(pullRequestPatchCount)"
      name: IfPullRequestBuildNameAndPatch

# Name branch prefix to build version (master branch & staging branch)
- job: Build_Branch_Version_Number
  condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.SourceBranch'], 'refs/heads/staging'), ne(variables['Build.Reason'], 'PullRequest'))
  variables:
    branchMajorMinor: $(majorProductVersion).$(minorProductVersion)-br$(variables['build.sourcebranch'])
    branchPatchCount: $[counter(variables['branchMajorMinor'], 0)]
  steps:
    - bash: |
        echo "##vso[build.updatebuildnumber]$(majorProductVersion).$(minorProductVersion).0-$(Build.BuildId)-$(branchPatchCount)"
      name: IfBranchBuildNameAndPatch

- job: Build_Master_Database_Management_System
  dependsOn:
      - Build_Branch_Version_Number
      - Build_PullRequest_Version_Number
      - Build_Staging_Version_Number
      - Build_Master_Version_Number
  condition: or(succeeded('Build_Branch_Version_Number'), succeeded('Build_PullRequest_Version_Number'), succeeded('Build_Staging_Version_Number'), succeeded('Build_Master_Version_Number'))

  pool:
    vmImage: 'windows-2019'
    displayName: 'Run Main Build'

  steps:
  # Installer
  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet 4.4.1'
    inputs:
      versionSpec: '4.4.1'
  
  # Specify sdk Version
  - task: UseDotNet@2
    displayName: 'Use sdk 3.1.102'
    inputs:
      packageType: 'sdk'
      version: '3.1.102'
  
  # Restore
  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
      command: restore
      projects: '$(buildProjects)'
      includeNuGetOrg: true
      feedsToUse: 'config'
      nugetConfigPath: 'nuget.config'

  # Prepare Sonar Cloud Analysis
  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: 'fixit-sonarcloud'
      organization: 'fixit'
      scannerMode: 'MSBuild'
      projectKey: 'fixit-app_MasterDatabaseManagementSystem'
      projectName: 'MasterDatabaseManagementSystem'
      extraProperties: |
        sonar.exclusions=**/obj/**,**/*.dll
        sonar.branch.name=$(Build.SourceBranchName)
        sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml
        sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx

 # Build
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      projects: '$(buildProjects)'
      arguments: '--configuration $(buildConfiguration) --no-restore'

  # Tests
  - task: DotNetCoreCLI@2
    displayName: Unit Tests
    inputs:
      command: 'test'
      testRunTitle: 'Master Database Management Unit Tests'
      projects: '**/Master.Database.Management.ServerlessApi.UnitTests.csproj'
      arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude="[*]Master.Database.Management.DataLayer*"'
      nobuild: true

  - script: |
      dotnet tool install -g dotnet-reportgenerator-globaltool --version 4.8.4 --ignore-failed-sources
      reportgenerator "-reports:$(Build.SourcesDirectory)/**/coverage.opencover.xml" "-targetdir:$(Build.SourcesDirectory)/CodeCoverage" "-reporttypes:HtmlInline_AzurePipelines;Cobertura"
    displayName: Create Code coverage report

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Master Database Management Code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

  # Run Sonar Cloud Analysis
  - task: SonarCloudAnalyze@1

  # Publish Sonar Cloud Report 
  - task: SonarCloudPublish@1
    inputs:
      pollingTimeoutSec: '300'
      
 # Pack
  - task: DotNetCoreCLI@2
    displayName: "Pack"
    inputs:
      command: 'pack'
      feedsToUse: 'select'
      arguments: '--configuration $(buildConfiguration)'
      packagesToPack: '$(publishDataLayer);$(publishServerlessApi)'
      vstsFeed: 'master-database-management'
      versioningScheme: 'byEnvVar'
      versionEnvVar: BUILD.BUILDNUMBER

  # Publish to Feed
  # allowPackageConflicts allows us to build the same version and not throw an error when trying to push, instead it just ingores the latest package unless the version changes
  # publishVstsFeed is fix-core-database Feed
  # byBuildNumber uses variable 'name'
  - task: NuGetCommand@2
    displayName: 'Nuget Push'
    inputs:
      command: 'push'
      feedsToUse: 'select'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
      nuGetFeedType: 'internal'
      publishVstsFeed: '08d378fd-be72-4c80-9ce4-1a7c754efb98/589eaa8f-1b09-4233-a280-49fcd648cd40'
      versioningScheme: 'byEnvVar'
      versionEnvVar: BUILD.BUILDNUMBER
      allowPackageConflicts: true

  # Publish PDBs
  - task: PublishSymbols@2
    displayName: 'Publish symbols path'
    inputs:
      SearchPattern: '*\bin**.pdb'
      PublishSymbols: false
    continueOnError: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'
      ArtifactName: 'drop'
